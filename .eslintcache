[{"/Users/topher/Documents/projects/ilplan/src/index.js":"1","/Users/topher/Documents/projects/ilplan/src/App.js":"2","/Users/topher/Documents/projects/ilplan/src/cards/FocusCard.js":"3","/Users/topher/Documents/projects/ilplan/src/cards/GoalCard.js":"4","/Users/topher/Documents/projects/ilplan/src/cards/WhyCard.js":"5","/Users/topher/Documents/projects/ilplan/src/cards/ILTPCard.js":"6","/Users/topher/Documents/projects/ilplan/src/cards/FrequencyCard.js":"7","/Users/topher/Documents/projects/ilplan/src/cards/WhoCard.js":"8","/Users/topher/Documents/projects/ilplan/src/atoms/visibilityState.js":"9","/Users/topher/Documents/projects/ilplan/src/cards/CompleteCard.js":"10","/Users/topher/Documents/projects/ilplan/src/atoms/progressState.js":"11","/Users/topher/Documents/projects/ilplan/src/atoms/surveyState.js":"12","/Users/topher/Documents/projects/ilplan/src/cards/ActivitiesCard.js":"13","/Users/topher/Documents/projects/ilplan/src/cards/ChooseLanguageCard.js":"14","/Users/topher/Documents/projects/ilplan/src/cards/PreviousScoresCard.js":"15","/Users/topher/Documents/projects/ilplan/src/ILTP.js":"16"},{"size":581,"mtime":1611321825683,"results":"17","hashOfConfig":"18"},{"size":6629,"mtime":1611321825675,"results":"19","hashOfConfig":"18"},{"size":4509,"mtime":1611321825680,"results":"20","hashOfConfig":"18"},{"size":2661,"mtime":1611321825680,"results":"21","hashOfConfig":"18"},{"size":2408,"mtime":1611321825683,"results":"22","hashOfConfig":"18"},{"size":1709,"mtime":1611321825681,"results":"23","hashOfConfig":"18"},{"size":5247,"mtime":1611321825680,"results":"24","hashOfConfig":"18"},{"size":5811,"mtime":1611321825682,"results":"25","hashOfConfig":"18"},{"size":392,"mtime":1611321825678,"results":"26","hashOfConfig":"18"},{"size":2624,"mtime":1611321825679,"results":"27","hashOfConfig":"18"},{"size":359,"mtime":1611321825677,"results":"28","hashOfConfig":"18"},{"size":354,"mtime":1611321825677,"results":"29","hashOfConfig":"18"},{"size":7515,"mtime":1611321825679,"results":"30","hashOfConfig":"18"},{"size":2868,"mtime":1611321825679,"results":"31","hashOfConfig":"18"},{"size":5352,"mtime":1611321825682,"results":"32","hashOfConfig":"18"},{"size":3755,"mtime":1611321825676,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"q4hdm9",{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},"/Users/topher/Documents/projects/ilplan/src/index.js",[],["75","76"],"/Users/topher/Documents/projects/ilplan/src/App.js",["77","78"],"import './App.css';\nimport React, { useEffect } from 'react';\nimport { Card, Button, ProgressBar } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\n\nimport { AiOutlineFileText, AiFillCloseCircle } from 'react-icons/ai';\n\nimport { useRecoilState, useRecoilValue } from 'recoil';\n\nimport ChooseLanguageCard from './cards/ChooseLanguageCard';\nimport PreviousScoresCard from './cards/PreviousScoresCard';\nimport GoalCard from './cards/GoalCard';\nimport WhyCard from './cards/WhyCard';\nimport FocusCard from './cards/FocusCard';\nimport ActivitiesCard from './cards/ActivitiesCard';\nimport FrequencyCard from './cards/FrequencyCard';\nimport WhoCard from './cards/WhoCard';\n\n\n\nimport visibilityState from './atoms/visibilityState';\nimport progressState from './atoms/progressState';\nimport surveyState from './atoms/surveyState';\nimport CompleteCard from './cards/CompleteCard';\nimport ILTPCard from './cards/ILTPCard';\n\nfunction App() {\n\n    const [isVisible, setVisibilityState] = useRecoilState(visibilityState);\n    const [progress, setProgress] = useRecoilState(progressState);\n    const survey = useRecoilValue(surveyState);\n\n    let vis = { ...isVisible };\n\n    useEffect(() => {\n        vis = { ...isVisible };\n    });\n\n    const hideCard = (name = \"\") => {\n        console.log(\"hiding...\" + name);\n        vis[name] = false;\n        setVisibilityState(vis);\n        return Promise.resolve();\n    };\n\n    const showCard = async (name = \"\") => {\n        console.log(\"showing... \" + name);\n        let visible = { ...vis };\n        visible[name] = true;\n        setVisibilityState(visible);\n        return Promise.resolve(visible);\n    };\n\n    const hideThenShow = (hide, show) => {\n\n        console.log(\"show hide called\");\n\n        console.log(isVisible);\n        hideCard(hide).then(\n            setTimeout(() => { showCard(show).then(console.log(isVisible)); }, 1000)\n        );\n    }\n\n    return (\n        <div class=\"App\" style={{ overflow: 'hidden', \n                                  backgroundImage: \"url(/monterey_trail.jpeg)\",\n                                  backgroundPosition: \"center\",\n                                  backgroundSize: \"cover\",  }}>\n            <div className=\"Header\">\n                <p>ILTP-Helper</p>\n                <ProgressBar now={progress} label={`${progress}%`} />\n            </div>\n            <div className=\"Content\">\n                <div className=\"Cards\">\n                    <Fade left collapse opposite when={isVisible.intro} duration={500} delay={200} onReveal={() => console.log(\"blahblahb\")}>\n                        <Card style={{ width: '40rem' }} >\n                            <Card.Body>\n                                <Card.Title>Welcome!</Card.Title>\n                                <Card.Text>\n                                    This app is designed to make it easier for linguists to develop an\n                                    Individualized Language Training Plan.  This program will ask you a series of\n                                    questions which will help you focus on achieving your Language learning goals.\n                             </Card.Text>\n                                <Button\n                                    variant=\"light\"\n                                    onClick={() => {\n\n                                        hideThenShow(\"intro\", \"chooseLanguage\");\n                                    }}>\n                                    Get Started\n                                </Button>\n                            </Card.Body>\n                        </Card>\n                    </Fade>\n                    <ChooseLanguageCard\n                        back={() => { hideThenShow(\"chooseLanguage\", \"intro\"); }}\n                        next={() => { hideThenShow(\"chooseLanguage\", \"previousScores\"); }}\n                    />\n                    <PreviousScoresCard\n                        back={() => { hideThenShow(\"previousScores\", \"chooseLanguage\"); }}\n                        next={() => { hideThenShow(\"previousScores\", \"goals\"); }}\n                    />\n                    <GoalCard\n                        back={() => { hideThenShow(\"goals\", \"previousScores\"); }}\n                        next={() => { hideThenShow(\"goals\", \"why\"); }}\n                    />\n                    <WhyCard\n                        back={() => { hideThenShow(\"why\", \"goals\"); }}\n                        next={() => { hideThenShow(\"why\", \"focus\"); }}\n                    />\n                    <FocusCard\n                        back={() => { hideThenShow(\"focus\", \"why\"); }}\n                        next={() => { hideThenShow(\"focus\", \"activities\"); }}\n                    />\n                    <ActivitiesCard\n                        back={() => { hideThenShow(\"activities\", \"focus\"); }}\n                        next={() => { hideThenShow(\"activities\", \"frequency\"); }}\n                    />\n                    <FrequencyCard\n                        back={() => { hideThenShow(\"frequency\", \"activities\"); }}\n                        next={() => { hideThenShow(\"frequency\", \"who\"); }}\n                    />\n                    <WhoCard\n                        back={() => { hideThenShow(\"who\", \"frequency\"); }}\n                        next={() => { hideThenShow(\"who\", \"complete\"); }}\n                    />\n                    <CompleteCard\n                        back={() => { hideThenShow(\"complete\", \"who\"); }}\n                        next={() => { hideThenShow(\"complete\", \"ILTP\")}}\n                    />\n                    <ILTPCard\n                        back={() => { hideThenShow(\"ILTP\", \"complete\"); }}\n                        next={() => { hideThenShow(\"ILTP\", \"intro\")}}\n                    />\n                </div>\n            </div>\n            <div class=\"Footer\">\n                <p>ILTP-Helper Copyright 2020</p>\n            </div>\n            <div class=\"BottomRightMenu\">\n                <AiOutlineFileText cursor=\"pointer\" size='2em' onClick={() => showCard(\"menuOverlay\")} />\n            </div>\n            <div class=\"GlassOverlay\" style={{ width: isVisible.menuOverlay ? '30vw' : '0px' }}>\n                <div class=\"GlassOverlayBottom\">\n                    <AiFillCloseCircle cursor=\"pointer\" size='1.5em' onClick={() => hideCard(\"menuOverlay\")} />\n                </div>\n\n                <div class=\"OverlayContent\">Learner Survey <div style={{ textAlign: \"left\", padding: '2em' }}>\n                    <pre style={{ fontSize: '.5em', color: 'white' }}>{JSON.stringify(survey, null, 3)}</pre>\n                </div>\n\n            </div>\n\n        </div>\n        </div>\n    );\n}\n\nexport default App;\n","/Users/topher/Documents/projects/ilplan/src/cards/FocusCard.js",[],"/Users/topher/Documents/projects/ilplan/src/cards/GoalCard.js",[],"/Users/topher/Documents/projects/ilplan/src/cards/WhyCard.js",["79"],"import React, { useState } from 'react';\nimport { Card, Button, Form } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\n\n\nimport visibilityState from '../atoms/visibilityState';\nimport progressState from '../atoms/progressState';\nimport surveyState from '../atoms/surveyState';\n\nconst WhyCard = ({next, back}) => {\n\n    const progressValue = 15;\n\n    const visible = useRecoilValue(visibilityState).why ? true : false;\n    const [progress, setProgress] = useRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n    const [progressAdded, setProgressAdded] = useState(false);\n    \n    const onChangeWhyHandler = (event) => {\n\n        if(!survey.why && !progressAdded){\n            setProgressAdded(true);\n            setProgress(progress + progressValue);\n        }\n        \n        setSurvey({...survey, ...{why: event.target.value}});\n    };\n\n    const goal = survey.goal ?? \"my goal\";\n\n    return (\n        <React.Fragment>\n            <Fade \n                left \n                opposite \n                collapse \n                when={visible} \n                duration={500} \n                delay={0} \n                delayOut={0}>\n                <Card style={{width: '40rem'}}>\n                    <Card.Body>\n                        <Card.Text>\n                        Why is achieving this goal important to you?\n                        <Form.Control \n                                placeholder={\"My goal is important to me because...\"} \n                                as=\"textarea\"\n                                size=\"lg\" \n                                rows={3}\n                                style={{margin: '1vh', padding: '.5rem'}}\n                                onChange={onChangeWhyHandler} />\n                        </Card.Text>\n                        <Button \n                            variant=\"light\" \n                            onClick={back} >\n                            Back\n                        </Button>\n                        {' '}\n                        <Button \n                            variant=\"light\" \n                            onClick={next} >\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default WhyCard;","/Users/topher/Documents/projects/ilplan/src/cards/ILTPCard.js",["80","81","82","83","84","85","86","87","88"],"import React, {useState} from 'react';\nimport { Card, Button, Badge, FormControl, CardGroup, CardDeck, CardColumns} from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\n\n\nimport visibilityState from '../atoms/visibilityState';\nimport progressState from '../atoms/progressState';\nimport surveyState from '../atoms/surveyState';\n\nimport ILTP from '../ILTP';\n\nfunction ILTPCard({back, next}) {\n\n    const visible = useRecoilValue(visibilityState).ILTP? true : false;\n    const setProgress = useSetRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n\n    return (\n        <React.Fragment>\n            <Fade\n                top\n                opposite\n                collapse\n                when={visible}\n                duration={500}\n                delay={0}\n            >\n                <Card style={{ width: '40rem' }}>\n                    <Card.Body>\n                        <Card.Title>Individualized Training Plan</Card.Title>\n                        <Card.Text>\n                            <ILTP />\n                        </Card.Text>\n                        <Button\n                            variant=\"light\"\n                            onClick={back}>\n                            Back\n                        </Button>\n                        {' '}\n                        <Button\n                            variant=\"light\"\n                            onClick={next}>\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n\n}\n\nexport default ILTPCard;","/Users/topher/Documents/projects/ilplan/src/cards/FrequencyCard.js",["89"],"import React, { useEffect, useState } from 'react';\nimport { Card, Button, Form, Row, Col, FormGroup } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { AiOutlineCheckCircle, AiOutlineMinusCircle } from 'react-icons/ai';\n\nimport visibilityState from '../atoms/visibilityState';\nimport progressState from '../atoms/progressState';\nimport surveyState from '../atoms/surveyState';\n\nconst FrequencyCard = ({next, back}) => {\n\n    const progressValue = 20;\n\n    const visible = useRecoilValue(visibilityState).frequency ? true : false;\n    const [progress, setProgress] = useRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n    const [activitiesFrequencies, setActivitiesFrequencies ] = useState({});\n    const [progressAdded, setProgressAdded] = useState(0);\n\n\n    let activities = Array.from(survey.activities ?? []);\n    \n\n    useEffect(() => {\n            // ratio of activities with frequency selected to total number of activities\n            let ratio = (Object.keys(activitiesFrequencies)?.length ?? 0) / (survey.activities?.length ?? 1);\n    \n            // console.log(\"progressAdded: \" + progressAdded);\n            // console.log(\"progress: \" + progress);\n            // console.log(\"numerator:\" + Object.keys(activitiesFrequencies)?.length);\n            // console.log(\"denom: \" + survey.activities?.length );\n    \n            // console.log(\"ratio: \" + ratio);\n    \n            // get the amount of progress \n            // take progress value of the component multiply by ratio\n            let progressAmount = Math.floor(ratio * progressValue);\n            console.log(\"progressAmount: \" + progressAmount);\n    \n            // add the progress to the state atom, subtract the amount previously \n            // added (tracked in local state).\n            // Fun Fact:  this has to be done in one operation of setProgress\n            // \n            setProgress(progress + progressAmount - progressAdded);\n\n    \n    \n            // update local state to reflect the amount of progress give\n            setProgressAdded(progressAmount);\n        \n    }, [survey]);\n\n\n    const selectFrequency = (event, activity) => {\n        let tempObj = {};\n        tempObj[activity] = event.target.value;\n        setActivitiesFrequencies({...activitiesFrequencies, ...tempObj});\n        setSurvey({...survey, ...{activitiesFrequencies: {...activitiesFrequencies, ...tempObj}}});\n        //console.log(activitiesFrequencies);\n        //calculateProgress();\n        \n    }\n\n    const ActivityFrequency = ({activity}) => {\n        return (\n            <React.Fragment>\n            <FormGroup as={Row} style={{ width: '80wv', marginTop: '.5em'}} >\n                <Col xs={1}>\n                    {activitiesFrequencies[activity] && activitiesFrequencies[activity] !== '-' ?\n                        <AiOutlineCheckCircle color='#0074d9' /> :\n                        <AiOutlineMinusCircle color='#aa1111' />     \n                    }\n                </Col>\n                <Col xs={5} style={{textAlign: 'left'}}>\n                    <span style={{ fontSize: '1.2rem' }}>{activity}</span>\n                </Col>                \n                <Col>\n                <Form.Control \n                    as=\"select\"\n                    onChange={(event) => {\n                                            selectFrequency(event, activity);\n                                            \n                                        }}\n                    \n                    value={activitiesFrequencies[activity] ?? \"-\"}\n                    custom                    \n                >\n                    <option>-</option>\n                    <option>Weekly</option>\n                    <option>Monthly</option>\n                    <option>Rarely</option>\n                    <option>One Time</option>\n                </Form.Control>\n                </Col>\n            </FormGroup>\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Fade \n                left \n                opposite \n                collapse \n                when={visible} \n                duration={500} \n                delay={0} \n                delayOut={0}>\n                <Card style={{width: '40rem'}}>\n                    <Card.Body>\n                        <Card.Text>\n                        How often are you going to do those activities? <br />\n                        {activities &&\n                            activities.map((item, index) => <ActivityFrequency key={\"af_\"+index} activity={item} />)\n                        }\n                        </Card.Text>\n                        <Button \n                            variant=\"light\" \n                            onClick={back} >\n                            Back\n                        </Button>\n                        {' '}\n                        <Button \n                            variant=\"light\" \n                            onClick={next} >\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default FrequencyCard;","/Users/topher/Documents/projects/ilplan/src/cards/WhoCard.js",["90"],"import React, { useEffect, useState } from 'react';\nimport { Card, Button, Form, FormGroup, Row, Col, Badge } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { AiFillCloseCircle } from 'react-icons/ai';\nimport { GiGraduateCap, GiWhip } from 'react-icons/gi';\nimport { FaHandsHelping } from 'react-icons/fa'\n\nimport visibilityState from '../atoms/visibilityState';\nimport progressState from '../atoms/progressState';\nimport surveyState from '../atoms/surveyState';\n\nconst WhoCard = ({next, back}) => {\n\n    const progressValue = 10;\n\n    const visible = useRecoilValue(visibilityState).who ? true : false;\n    const [progress, setProgress] = useRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n    const [currentMentor, setCurrentMentor] = useState(\"\");\n    const [currentMentorType, setCurrentMentorType] = useState(\"Mentor\");\n\n\n    const addMentor = () => {\n\n        // if there is no mentors property in the survey\n        // then this is the first mentor being added and \n        // the progress bar should be updated\n        if(!survey.hasOwnProperty(\"mentors\")){\n            setProgress(progress + progressValue);\n        }\n\n        let tempMentorsObj = survey.mentors ? [...survey.mentors] : [];\n        let tempMentorObj = {\n            name: currentMentor,\n            type: currentMentorType,\n        };\n        //tempMentorsObj[currentMentor] = currentMentorType;\n        tempMentorsObj.push(tempMentorObj);\n        setSurvey({...survey, ...{mentors: tempMentorsObj}});\n    }\n\n    const Mentors = () => {\n        return (\n            <React.Fragment>\n                {survey.mentors &&\n                    survey.mentors.map((mentor, index) => {\n                      return (  \n                        <Badge \n                            pill \n                            variant=\"primary\"\n                            as=\"span\"\n                            key={\"m_\"+index}\n                            style={{padding: '.5em', margin: '.2em'}}>\n                                {mentor.type === \"Mentor\" && <FaHandsHelping />  }\n                                {mentor.type === \"Task-Master\" && <GiWhip /> }\n                                {mentor.type === \"Language Expert\" && <GiGraduateCap /> } \n                                {' '}{mentor.name}{' '}\n                                <AiFillCloseCircle cursor=\"pointer\" onClick={() => {removeMentor(mentor.name)}}  />\n                        </Badge>\n                        );\n                    })    \n                }\n            </React.Fragment>\n        );\n    }\n\n    const removeMentor = (name) => {\n        \n        let tempMentorsObj = [...survey.mentors].filter(item => item.name !== name) ?? [];\n\n        setSurvey({...survey, ...{mentors: tempMentorsObj}});\n        \n\n    }\n    \n    return (\n        <React.Fragment>\n            <Fade \n                left \n                opposite \n                collapse \n                when={visible} \n                duration={500} \n                delay={0} \n                delayOut={0}>\n                <Card style={{width: '40rem'}}>\n                    <Card.Body>\n                        <Card.Text>\n                        Who can you rely on to help mentor you?  To help you stick to your goals?\n                            <br />\n                            <Mentors />\n                            <FormGroup as={Row} style={{ width: '80wv', marginTop: '.5em'}} >\n                                <Col xs={6} style={{textAlign: 'left'}}>\n                                    <Form.Control \n                                        type=\"text\"\n                                        placeholder=\"Who will help you?\"\n                                        value={currentMentor}\n                                        onChange={(event) => { \n                                            setCurrentMentor(event.target.value);\n                                            console.log(event.target.value);\n                                        }}\n                                    />\n                                </Col>                \n                                <Col xs={4}>\n                                <Form.Control \n                                    as=\"select\"\n                                    onChange={(event) => setCurrentMentorType(event.target.value)}\n                                    value={currentMentorType ?? \"Mentor\"}\n                                    custom                    \n                                >\n                                    <option>Mentor</option>\n                                    <option>Task-Master</option>\n                                    <option>Language Expert</option>\n                                </Form.Control>\n                                </Col>\n                                <Col xs=\"auto\">\n                                    <Button\n                                        onClick={addMentor} \n                                        variant='primary' \n                                        >Add</Button>\n                                </Col>\n                            </FormGroup>             \n                        </Card.Text>\n                        <Button \n                            variant=\"light\" \n                            onClick={back} >\n                            Back\n                        </Button>\n                        {' '}\n                        <Button \n                            variant=\"light\" \n                            onClick={next} >\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default WhoCard;","/Users/topher/Documents/projects/ilplan/src/atoms/visibilityState.js",[],"/Users/topher/Documents/projects/ilplan/src/cards/CompleteCard.js",["91","92","93","94","95","96","97","98","99","100","101","102"],"import React, {useState, createRef} from 'react';\nimport { Card, Button, Badge, FormControl, CardGroup, CardDeck, CardColumns} from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { AiFillPlusCircle, AiFillCheckCircle} from 'react-icons/ai';\n\nimport visibilityState from '../atoms/visibilityState';\nimport surveyState from '../atoms/surveyState';\nimport progressState from '../atoms/progressState';\n\nconst CompleteCard = ({next, back}) => {\n\n    const visible = useRecoilValue(visibilityState).complete ? true : false;\n\n    return (\n        <React.Fragment>\n            <Fade \n                bottom\n                cascade \n                collapse \n                when={visible} \n                duration={500} \n                delay={0} \n                delayOut={0}\n                >\n                <div style={{display: 'grid', width: '60vw', gridTemplateColumns: '1fr 1fr 1fr'}}>\n                    <Card style={{background: 'white', flex: '1', marginRight: '1rem'}}>\n                    <Card.Body>\n                        Start over\n                        <br />\n                            <Button\n                                style={{marginTop: '1rem'}}\n                                variant=\"primary\"\n                            >Start Over</Button>\n                        </Card.Body>\n                    </Card>\n                    <Card style={{background: 'white', flex: '1', marginRight: '1rem', marginLeft: '1rem'}}>\n                        <Card.Body>\n                        Go back, maybe change some answers\n                        <br />\n                            <Button\n                                style={{marginTop: '1rem'}}\n                                variant=\"primary\"\n                                onClick={back}\n                            >Back</Button>\n                        </Card.Body>\n                    </Card>\n                    <Card style={{background: 'white', flex: '1', marginLeft: '1rem', minHeight: '30vh'}}>\n                        <Card.Body>\n                            Get learning plan based on your answers\n                            <br />\n                            <Button\n                                style={{marginTop: '1rem'}}\n                                variant=\"primary\"\n                                onClick={next}\n                            >Get ILTP</Button>\n                        </Card.Body>\n                    </Card>\n\n                </div>\n\n\n                  \n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default CompleteCard;","/Users/topher/Documents/projects/ilplan/src/atoms/progressState.js",[],"/Users/topher/Documents/projects/ilplan/src/atoms/surveyState.js",[],"/Users/topher/Documents/projects/ilplan/src/cards/ActivitiesCard.js",[],"/Users/topher/Documents/projects/ilplan/src/cards/ChooseLanguageCard.js",["103"],"import React, { useEffect } from 'react';\nimport { Card, Button, Form } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\n\nimport visibilityState from '../atoms/visibilityState';\nimport progressState from '../atoms/progressState';\nimport surveyState from '../atoms/surveyState';\n\nconst ChooseLanguageCard = ({back, next}) => {\n\n    const progressValue = 10;\n\n    const visible = useRecoilValue(visibilityState).chooseLanguage ? true : false;\n    const [progress, setProgress] = useRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n\n    const onChangeLanguageHandler = (event) => {\n\n        // Check to see if the survey has property of targetLanguage... if that property  does not exist\n        // then give this is the first time a language is being chosen, add the progressValue to the \n        // progress meter. \n        if(!survey.hasOwnProperty(\"targetLanguage\")){\n            setProgress(progress + progressValue);\n        }\n   \n        setSurvey({...survey, ...{targetLanguage: event.target.value }});\n\n    } \n\n    return (\n        <React.Fragment>\n            <Fade\n                left\n                opposite\n                collapse\n                when={visible}\n                duration={500}\n                delay={0}\n            >\n                <Card style={{ width: '40rem' }}>\n                    <Card.Body>\n                        <Card.Text>\n                            What's your target language?\n                            <br />\n                            <Form.Control \n                                placeholder=\"Choose a language...\" \n                                type=\"text\" \n                                size=\"lg\" \n                                list=\"languages\" \n                                style={{margin: '1vh', padding: '.5rem'}}\n                                onChange={onChangeLanguageHandler} />\n                            <datalist id=\"languages\">\n                                <option>Russian</option>\n                                <option>Spanish</option>\n                                <option>Korean</option>\n                                <option>Chinese</option>\n                            </datalist>\n                        </Card.Text>\n                        <Button\n                            variant=\"light\"\n                            onClick={back}>\n                            Back\n                        </Button>\n                        {' '}\n                        <Button\n                            variant=\"light\"\n                            onClick={next}>\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default ChooseLanguageCard;","/Users/topher/Documents/projects/ilplan/src/cards/PreviousScoresCard.js",[],"/Users/topher/Documents/projects/ilplan/src/ILTP.js",["104","105"],"import reactReveal from \"react-reveal\";\nimport React, { useEffect } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport surveyState from './atoms/surveyState';\n\n\nconst Language = ({language = \"Not Specified\"}) => {\n\n    return (\n        <React.Fragment>\n            Target Language: {language} <br />\n        </React.Fragment>\n    );\n};\n\nconst Scores = ({listening = \"N/A\", reading = \"N/A\"}) => {\n    \n\n    return (\n        <React.Fragment>\n            Reading: {reading} <br />\n            Listening: {listening} <br />\n        </React.Fragment>\n    );\n\n};\n\n\nconst Goal = ({goal}) => {\n\n    return (\n        <React.Fragment>\n            <div>Your goal: {goal}</div>\n        </React.Fragment>\n    );\n\n};\n\nconst Why = ({why}) => {\n    return (\n        <React.Fragment>\n            <div>Your reason for wanting to achieve your goal: {why}</div>\n        </React.Fragment>\n    );\n};\nconst Foci = ({foci}) => {\n    console.log(foci);\n    if(foci && foci.length){\n        return (\n            <React.Fragment>\n                <div>\n                    You identified the following areas which you wanted to focus on \n                    in order to achieve your goal. \n                    {foci && foci.map((item, index) => { \n                        return(\n                            <div key={\"foci_\"+index}>{item}</div>\n                        );\n                    })}\n                </div>\n            </React.Fragment>\n        );\n    }else{\n        return <></>;\n    }\n\n};\n\nconst Activities = ({activities}) => {\n    console.log(activities);\n    if(activities && Object.keys(activities).length){\n        return (\n            <React.Fragment>\n                <div>\n                    You identified the following activities:\n                    {activities &&  Object.entries(activities).map((item, index) => {\n                        console.log(item);\n                        return (<div>{item[0]} which you will do {item[1]}</div>);\n                        \n                    })}\n\n                </div>\n            </React.Fragment>\n        );\n    }else{\n        return(\n            <React.Fragment>\n                <div>You did not name any activities. Achieving your goal will take work! What will you\n                    do to achieve it? \n                </div>\n            </React.Fragment>\n\n        );\n    }\n};\n\nconst Mentors = ({mentors}) => {\n    if(mentors && mentors.length){\n        return (\n            <React.Fragment>\n                <div>\n                    You identified the following mentors:\n                    {mentors && mentors.map((item, index) => { \n                        return(\n                            <div key={\"mentors_\"+index}>{item.name}</div>\n                        );\n                    })}\n\n                </div>\n            </React.Fragment>\n        );\n    }else{\n        return(\n            <React.Fragment>\n                <div>You did not identify any mentors.  Consider adding one or more mentors in order to help you\n                    stay on track!\n                </div>\n            </React.Fragment>\n\n        );\n    }\n\n};\n\n\n\nfunction ILTP() {\n\n    const survey = useRecoilValue(surveyState);\n\n    return (\n        <React.Fragment>\n            <div style={{fontSize: '1rem', textAlign: 'left'}}>\n                <Language language={survey.targetLanguage} />\n                <Scores reading={survey.readingScore} listening={survey.listeningScore} />\n                <Goal goal={survey.goal} />\n                <Why why={survey.why} />\n                <Foci foci={survey.loci} />\n                <Activities activities={survey.activitiesFrequencies} />\n                <Mentors mentors={survey.mentors} />\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default ILTP;",{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":30,"column":22,"nodeType":"112","messageId":"113","endLine":30,"endColumn":33},{"ruleId":"114","severity":1,"message":"115","line":36,"column":15,"nodeType":"116","endLine":36,"endColumn":31},{"ruleId":"110","severity":1,"message":"117","line":30,"column":11,"nodeType":"112","messageId":"113","endLine":30,"endColumn":15},{"ruleId":"110","severity":1,"message":"118","line":1,"column":16,"nodeType":"112","messageId":"113","endLine":1,"endColumn":24},{"ruleId":"110","severity":1,"message":"119","line":2,"column":24,"nodeType":"112","messageId":"113","endLine":2,"endColumn":29},{"ruleId":"110","severity":1,"message":"120","line":2,"column":31,"nodeType":"112","messageId":"113","endLine":2,"endColumn":42},{"ruleId":"110","severity":1,"message":"121","line":2,"column":44,"nodeType":"112","messageId":"113","endLine":2,"endColumn":53},{"ruleId":"110","severity":1,"message":"122","line":2,"column":55,"nodeType":"112","messageId":"113","endLine":2,"endColumn":63},{"ruleId":"110","severity":1,"message":"123","line":2,"column":65,"nodeType":"112","messageId":"113","endLine":2,"endColumn":76},{"ruleId":"110","severity":1,"message":"111","line":16,"column":11,"nodeType":"112","messageId":"113","endLine":16,"endColumn":22},{"ruleId":"110","severity":1,"message":"124","line":17,"column":12,"nodeType":"112","messageId":"113","endLine":17,"endColumn":18},{"ruleId":"110","severity":1,"message":"125","line":17,"column":20,"nodeType":"112","messageId":"113","endLine":17,"endColumn":29},{"ruleId":"114","severity":1,"message":"126","line":52,"column":8,"nodeType":"127","endLine":52,"endColumn":16,"suggestions":"128"},{"ruleId":"110","severity":1,"message":"129","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":26},{"ruleId":"110","severity":1,"message":"118","line":1,"column":16,"nodeType":"112","messageId":"113","endLine":1,"endColumn":24},{"ruleId":"110","severity":1,"message":"130","line":1,"column":26,"nodeType":"112","messageId":"113","endLine":1,"endColumn":35},{"ruleId":"110","severity":1,"message":"119","line":2,"column":24,"nodeType":"112","messageId":"113","endLine":2,"endColumn":29},{"ruleId":"110","severity":1,"message":"120","line":2,"column":31,"nodeType":"112","messageId":"113","endLine":2,"endColumn":42},{"ruleId":"110","severity":1,"message":"121","line":2,"column":44,"nodeType":"112","messageId":"113","endLine":2,"endColumn":53},{"ruleId":"110","severity":1,"message":"122","line":2,"column":55,"nodeType":"112","messageId":"113","endLine":2,"endColumn":63},{"ruleId":"110","severity":1,"message":"123","line":2,"column":65,"nodeType":"112","messageId":"113","endLine":2,"endColumn":76},{"ruleId":"110","severity":1,"message":"131","line":4,"column":10,"nodeType":"112","messageId":"113","endLine":4,"endColumn":24},{"ruleId":"110","severity":1,"message":"132","line":5,"column":10,"nodeType":"112","messageId":"113","endLine":5,"endColumn":26},{"ruleId":"110","severity":1,"message":"133","line":5,"column":28,"nodeType":"112","messageId":"113","endLine":5,"endColumn":45},{"ruleId":"110","severity":1,"message":"134","line":8,"column":8,"nodeType":"112","messageId":"113","endLine":8,"endColumn":19},{"ruleId":"110","severity":1,"message":"135","line":9,"column":8,"nodeType":"112","messageId":"113","endLine":9,"endColumn":21},{"ruleId":"110","severity":1,"message":"129","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":26},{"ruleId":"110","severity":1,"message":"136","line":1,"column":8,"nodeType":"112","messageId":"113","endLine":1,"endColumn":19},{"ruleId":"110","severity":1,"message":"129","line":2,"column":17,"nodeType":"112","messageId":"113","endLine":2,"endColumn":26},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'setProgress' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'vis' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","'goal' is assigned a value but never used.","'useState' is defined but never used.","'Badge' is defined but never used.","'FormControl' is defined but never used.","'CardGroup' is defined but never used.","'CardDeck' is defined but never used.","'CardColumns' is defined but never used.","'survey' is assigned a value but never used.","'setSurvey' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activitiesFrequencies', 'progress', 'progressAdded', and 'setProgress'. Either include them or remove the dependency array.","ArrayExpression",["139"],"'useEffect' is defined but never used.","'createRef' is defined but never used.","'useRecoilState' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'AiFillCheckCircle' is defined but never used.","'surveyState' is defined but never used.","'progressState' is defined but never used.","'reactReveal' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},"Update the dependencies array to be: [activitiesFrequencies, progress, progressAdded, setProgress, survey]",{"range":"142","text":"143"},[2178,2186],"[activitiesFrequencies, progress, progressAdded, setProgress, survey]"]