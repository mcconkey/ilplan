{"version":3,"sources":["atoms/visibilityState.js","atoms/progressState.js","atoms/surveyState.js","cards/ChooseLanguageCard.js","cards/PreviousScoresCard.js","cards/GoalCard.js","cards/WhyCard.js","cards/FocusCard.js","cards/ActivitiesCard.js","cards/FrequencyCard.js","cards/WhoCard.js","cards/CompleteCard.js","ILTP.js","cards/ILTPCard.js","App.js","index.js"],"names":["visibilityState","atom","key","default","intro","progressState","surveyState","ChooseLanguageCard","back","next","visible","useRecoilValue","chooseLanguage","useRecoilState","progress","setProgress","survey","setSurvey","Fragment","left","opposite","collapse","when","duration","delay","Card","className","Body","Text","Form","Control","placeholder","type","size","list","style","margin","padding","onChange","event","hasOwnProperty","targetLanguage","target","value","id","Button","variant","onClick","PreviousScoresCard","previousScores","delayOut","Row","marginLeft","Group","as","Col","Label","htmlFor","fontSize","readingScore","listeningScore","GoalCard","goals","goal","WhyCard","why","useState","progressAdded","setProgressAdded","rows","FocusCard","focus","currentFocus","setCurrentFocus","Badges","foci","map","index","Badge","pill","cursor","newFoci","filter","item","removeFocus","InputGroup","Append","fociList","push","includes","ActivitiesCard","activities","currentActivity","setCurrentActivity","addedProgress","setAddedProgress","addActivityVisible","setAddActivityVisible","inputRef","createRef","activitiesList","setActivitiesList","console","log","isSelectedCheck","activity","Array","length","last","slice","join","stringifyFociList","class","display","Set","onActivityClickHandler","contentEditable","onInput","currentTarget","textContent","ref","borderBottom","overflow","textOverflow","verticalAlign","width","minWidth","current","FrequencyCard","frequency","activitiesFrequencies","setActivitiesFrequencies","from","numberOfActivities","numberOfFrequencies","Object","keys","useEffect","ratio","progressAmount","Math","floor","ActivityFrequency","FormGroup","marginTop","xs","color","textAlign","tempObj","selectFrequency","custom","WhoCard","who","currentMentor","setCurrentMentor","currentMentorType","setCurrentMentorType","Mentors","mentors","mentor","name","removeMentor","tempMentorsObj","marginBottom","sm","paddingRight","paddingLeft","tempMentorObj","CompleteCard","start","complete","useSetRecoilState","bottom","cascade","gridTemplateColumns","getILTP","language","scores","listening","reading","retString","entries","ILTPText","ILTPCard","ILTPElement","useRef","showCopiedSuccess","setShowCopiedSuccess","ILTP","top","Title","noGutters","sty","href","innerHTML","navigator","clipboard","writeText","then","Toast","onClose","show","autohide","position","right","App","isVisible","setVisibilityState","vis","hideCard","Promise","resolve","showCard","a","hideThenShow","hide","setTimeout","backgroundImage","backgroundPosition","backgroundSize","ProgressBar","now","label","menuOverlay","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e099796.chunk.js","sourcesContent":["// This is a Recoil atom which is responsible for maintaining state of\n// the visibility of objects across the App--allowing one component to hide\n// another component, without trixy callback functions and param passing.\n\nimport { atom } from 'recoil';\n\nconst visibilityState = atom({\n    key: 'visibilityState',\n    default: {\n        intro: true,\n    },\n});\n\nexport default visibilityState;","// This is a Recoil atom which is responsible for maintaining state of\n// the visibility of objects across the App--allowing one component to hide\n// another component, without trixy callback functions and param passing.\n\nimport { atom } from 'recoil';\n\nconst progressState = atom({\n    key: 'progressState',\n    default: 0,\n});\n\nexport default progressState;","// This is a Recoil atom which is responsible for maintaining state of\n// the visibility of objects across the App--allowing one component to hide\n// another component, without trixy callback functions and param passing.\n\nimport { atom } from 'recoil';\n\nconst surveyState = atom({\n    key: 'surveyState',\n    default: {},\n});\n\nexport default surveyState;","import React from 'react';\nimport { Card, Button, Form } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\n\nimport visibilityState from '../atoms/visibilityState';\nimport progressState from '../atoms/progressState';\nimport surveyState from '../atoms/surveyState';\n\nconst ChooseLanguageCard = ({back, next}) => {\n\n    const progressValue = 10;\n\n    const visible = useRecoilValue(visibilityState).chooseLanguage ? true : false;\n    const [progress, setProgress] = useRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n\n    const onChangeLanguageHandler = (event) => {\n\n        // Check to see if the survey has property of targetLanguage... if that property  does not exist\n        // then give this is the first time a language is being chosen, add the progressValue to the \n        // progress meter. \n        if(!survey.hasOwnProperty(\"targetLanguage\")){\n            setProgress(progress + progressValue);\n        }\n   \n        setSurvey({...survey, ...{targetLanguage: event.target.value }});\n\n    } \n\n    return (\n        <React.Fragment>\n            <Fade\n                left\n                opposite\n                collapse\n                when={visible}\n                duration={500}\n                delay={0}\n            >\n                <Card className=\"SlidingCard\" >\n                    <Card.Body>\n                        <Card.Text>\n                            What's your target language?\n                            <br />\n                            <Form.Control \n                                placeholder=\"Choose a language...\" \n                                type=\"text\" \n                                size=\"lg\" \n                                list=\"languages\" \n                                style={{margin: '1vh', padding: '.5rem'}}\n                                onChange={onChangeLanguageHandler} />\n                            <datalist id=\"languages\">\n                                <option>Russian</option>\n                                <option>Spanish</option>\n                                <option>Korean</option>\n                                <option>Chinese</option>\n                            </datalist>\n                        </Card.Text>\n                        <Button\n                            variant=\"light\"\n                            onClick={back}>\n                            Back\n                        </Button>\n                        {' '}\n                        <Button\n                            variant=\"light\"\n                            onClick={next}>\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default ChooseLanguageCard;","import React from 'react';\nimport { Card, Button, Form, Col } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\n\nimport visibilityState from '../atoms/visibilityState';\nimport surveyState from '../atoms/surveyState';\nimport progressState from '../atoms/progressState';\n\nconst PreviousScoresCard = ({next, back}) => {\n\n    // on this card this value is used twice \n    const progressValue = 5;\n\n    const visible = useRecoilValue(visibilityState).previousScores ? true : false;\n    const [progress, setProgress] = useRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n\n\n    const changeReadingScoreHandler = (event) => {\n\n        if(!survey.hasOwnProperty(\"readingScore\")){\n            setProgress(progress + progressValue);\n        }\n        \n         setSurvey({...survey, ...{readingScore: event.target.value}});\n    };\n\n\n    const changeListeningScoreHandler = (event) => {\n\n        if(!survey.hasOwnProperty(\"listeningScore\")){\n            setProgress(progress + progressValue);\n        }\n        \n        setSurvey({...survey, ...{listeningScore: event.target.value}});\n    };\n\n\n    return (\n        <React.Fragment>\n            <Fade \n                left \n                opposite \n                collapse \n                when={visible} \n                duration={500} \n                delay={0} \n                delayOut={0}>\n                <Card className=\"SlidingCard\">\n                    <Card.Body>\n                        <Card.Text>\n                        What were your previous scores in {survey.targetLanguage ?? 'your target language'}?\n                        <Form>\n                            <Form.Row style={{marginLeft: '-10px'}}>\n                                <Form.Group as={Col}>\n                                        <Form.Label \n                                        htmlFor=\"readingScore\"\n                                        style={{fontSize: '1rem'}}\n                                    >Reading</Form.Label>\n                                    <Form.Control \n                                        placeholder=\"Reading\" \n                                        size=\"lg\"\n                                        as=\"select\"                                 \n                                        id=\"readingScore\"\n                                        list=\"scores\" \n                                        style={{margin: '.5vh', padding: '.5rem'}}\n                                        onChange={changeReadingScoreHandler} >\n                                        <option>0+</option>\n                                        <option>1</option>\n                                        <option>1+</option>\n                                        <option>2</option>\n                                        <option>2+</option>\n                                        <option>3</option>\n                                        <option>3+</option>\n                                        <option>4</option>\n                                        <option>4+</option>\n                                        <option>5</option>\n                                    </Form.Control>\n                                </Form.Group>\n                                <Form.Group as={Col}>\n                                <Form.Label \n                                htmlFor=\"listeningScore\"\n                                style={{fontSize: '1rem'}}\n                               >Listening</Form.Label>\n                                <Form.Control \n                                    as=\"select\"                                 \n                                    size=\"lg\" \n                                    id=\"listeningScore\"\n                                    list=\"scores\" \n                                    style={{margin: '.5vh', padding: '.5rem'}}\n                                    onChange={changeListeningScoreHandler} >\n                                        <option>0+</option>\n                                    <option>1</option>\n                                    <option>1+</option>\n                                    <option>2</option>\n                                    <option>2+</option>\n                                    <option>3</option>\n                                    <option>3+</option>\n                                    <option>4</option>\n                                    <option>4+</option>\n                                    <option>5</option>\n                                </Form.Control>\n                                </Form.Group>                      \n                            </Form.Row>\n                        </Form>                       \n                        </Card.Text>\n                        <Button \n                            variant=\"light\" \n                            onClick={back} >\n                            Back\n                        </Button>\n                        {' '}\n                        <Button \n                            variant=\"light\" \n                            onClick={next} >\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default PreviousScoresCard;","import React from 'react';\nimport { Card, Button, Form } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\n\nimport visibilityState from '../atoms/visibilityState';\nimport progressState from '../atoms/progressState';\nimport surveyState from '../atoms/surveyState';\n\nconst GoalCard = ({next, back}) => {\n\n    const progressValue =  15;\n\n\n    const visible = useRecoilValue(visibilityState).goals ? true : false;\n    const [progress, setProgress] = useRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n    \n\n    const onChangeGoalHandler = (event) => {\n        if(!survey.hasOwnProperty(\"goal\")){\n            setProgress(progress + progressValue);\n        }\n        setSurvey({...survey, ...{goal: event.target.value}});\n    };\n\n\n    return (\n        <React.Fragment>\n            <Fade \n                left \n                opposite \n                collapse \n                when={visible} \n                duration={500} \n                delay={0} \n                delayOut={0}>\n                <Card className=\"SlidingCard\">\n                    <Card.Body>\n                        <Card.Text>\n                        What are your language goals?\n                        <Form.Control \n                                placeholder=\"Select a goal or create your own...\" \n                                type=\"text\" \n                                size=\"lg\" \n                                list=\"goals\" \n                                style={{margin: '1vh', padding: '.5rem'}}\n                                onChange={onChangeGoalHandler} />\n                            <datalist id=\"goals\">\n                                <option>Improve my language scores</option>\n                                <option>Maintain my language scores</option>\n                                <option>Become more proficient with my current mission</option>\n                                <option>Engage more with my target language</option>\n                            </datalist>\n                        </Card.Text>\n                        <Button \n                            variant=\"light\" \n                            onClick={back} >\n                            Back\n                        </Button>\n                        {' '}\n                        <Button \n                            variant=\"light\" \n                            onClick={next} >\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default GoalCard;","import React, { useState } from 'react';\nimport { Card, Button, Form } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\n\n\nimport visibilityState from '../atoms/visibilityState';\nimport progressState from '../atoms/progressState';\nimport surveyState from '../atoms/surveyState';\n\nconst WhyCard = ({next, back}) => {\n\n    const progressValue = 15;\n\n    const visible = useRecoilValue(visibilityState).why ? true : false;\n    const [progress, setProgress] = useRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n    const [progressAdded, setProgressAdded] = useState(false);\n    \n    const onChangeWhyHandler = (event) => {\n\n        if(!survey.why && !progressAdded){\n            setProgressAdded(true);\n            setProgress(progress + progressValue);\n        }\n        \n        setSurvey({...survey, ...{why: event.target.value}});\n    };\n\n    //const goal = survey.goal ?? \"my goal\";\n\n    return (\n        <React.Fragment>\n            <Fade \n                left \n                opposite \n                collapse \n                when={visible} \n                duration={500} \n                delay={0} \n                delayOut={0}>\n                <Card className=\"SlidingCard\">\n                    <Card.Body>\n                        <Card.Text>\n                        Why is achieving this goal important to you?\n                        <Form.Control \n                                placeholder={\"My goal is important to me because...\"} \n                                as=\"textarea\"\n                                size=\"lg\" \n                                rows={3}\n                                style={{margin: '1vh', padding: '.5rem'}}\n                                onChange={onChangeWhyHandler} />\n                        </Card.Text>\n                        <Button \n                            variant=\"light\" \n                            onClick={back} >\n                            Back\n                        </Button>\n                        {' '}\n                        <Button \n                            variant=\"light\" \n                            onClick={next} >\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default WhyCard;","import React, { useState } from 'react';\nimport { Card, Button, Form, InputGroup, Badge } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { AiFillCloseCircle} from 'react-icons/ai';\n\nimport visibilityState from '../atoms/visibilityState';\nimport progressState from '../atoms/progressState';\nimport surveyState from '../atoms/surveyState';\n\nconst FocusCard = ({next, back}) => {\n\n    const progressValue = 10;\n\n    const visible = useRecoilValue(visibilityState).focus ? true : false;\n    const [progress, setProgress] = useRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n    const [currentFocus, setCurrentFocus] = useState(\"\");\n\n    \n    \n    const addFocusHandler = () => {\n        let fociList = [];\n\n        if(!survey.foci){\n            setProgress(progress + progressValue);\n        }\n\n        if(survey.foci){\n            fociList.push(...survey.foci);\n        }\n\n        if(!fociList.includes(currentFocus)){\n            fociList.push(currentFocus);\n        }\n        \n        setSurvey({...survey, ...{foci: fociList}})\n        setCurrentFocus(\"\");\n    }\n\n    const onChangeHandler = (event) => {\n        setCurrentFocus(event.target.value);\n    }\n\n    const removeFocus = (focus = \"\") => {\n        let newFoci = survey.foci.filter(item => item !== focus);\n        setSurvey({...survey, ...{foci: newFoci}});    \n    }\n\n    const Badges =  () => {\n\n        if(!survey.foci){\n            return <></>;\n        }\n\n        if(survey.foci){\n            let badges = survey.foci.map((focus, index) => { \n                return ( \n                    <Badge key={\"g_\"+index} pill variant=\"primary\" style={{padding: '.5em', margin: '.2em'}}>\n                        {focus} {' '}\n                        <AiFillCloseCircle cursor=\"pointer\" onClick={() => removeFocus(focus)} />\n                    </Badge>\n                );  \n                \n            });\n            return badges;\n        }\n\n\n    };\n    \n\n    return (\n        <React.Fragment>\n            <Fade \n                left \n                opposite \n                collapse \n                when={visible} \n                duration={500} \n                delay={0} \n                delayOut={0}>\n                <Card className=\"SlidingCard\">\n                    <Card.Body>\n                        <Card.Text>\n                        What aspects of { survey.targetLanguage ?? 'your target language' } do you\n                        plan to focus on? \n                        <InputGroup className=\"mb-3\">\n                            <Form.Control \n                                placeholder=\"Focus...\" \n                                type=\"text\"\n                                value={currentFocus}    \n                                size=\"lg\"                             \n                                list=\"foci\" \n                                style={{ padding: '.5rem'}}\n                                onChange={onChangeHandler}\n                            />\n                            <InputGroup.Append>\n                                <Button variant=\"outline-secondary\" onClick={ addFocusHandler }>Add</Button>\n                            </InputGroup.Append>\n                        </InputGroup>\n                            <datalist id=\"foci\">\n                                <option>Reading</option>\n                                <option>Listening</option>\n                                <option>Vocabulary</option>\n                                <option>Transcription</option>\n                                <option>Real-Time Translation</option>\n                                <option>Authentic Material Interpretation</option>\n                                <option>Test Taking Skills</option>\n                            </datalist>\n                        </Card.Text>\n                        <Badges />\n                        <br />\n                        <Button \n                            variant=\"light\" \n                            onClick={back} >\n                            Back\n                        </Button>\n                        {' '}\n                        <Button \n                            variant=\"light\" \n                            onClick={next} >\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default FocusCard;","import React, {useState, createRef} from 'react';\nimport { Card, Button, Badge } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { AiFillPlusCircle, AiFillCheckCircle} from 'react-icons/ai';\n\nimport visibilityState from '../atoms/visibilityState';\nimport surveyState from '../atoms/surveyState';\nimport progressState from '../atoms/progressState';\n\nconst ActivitiesCard = ({next, back}) => {\n\n    const progressValue = 10;\n\n    const visible = useRecoilValue(visibilityState).activities ? true : false;\n    const [progress, setProgress] = useRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n    \n    const [currentActivity, setCurrentActivity] = useState(\"\");\n    const [addedProgress, setAddedProgress]  = useState(false);\n    const [addActivityVisible, setAddActivityVisible] = useState(false);\n\n    const inputRef = createRef();\n\n    const [activitiesList, setActivitiesList] = useState([\n                                \"Read a book\",\n                                \"Watch a TV Show\",\n                                \"Study vocabulary\",\n                                \"Study grammar\",\n                                \"Listen to Podcast\"]);\n\n\n\n\n    const stringifyFociList = () => {\n        if(!survey.foci){\n            return 'your focus areas';\n        }\n        if(survey.foci.length === 1){\n            return survey.foci[0];\n        }\n        let list = survey.foci;\n        const last = list.slice(-1);\n        return list.slice(0, -1).join(', ') + ' and ' + last;\n    }\n\n    console.log(survey.activities);\n\n    const onActivityClickHandler =  (activity) => {\n\n        if(!addedProgress){\n            setAddedProgress(true);\n            setProgress(progress + progressValue);\n        }\n        \n        if(!isSelectedCheck(activity)){\n            // if not selected add it to selected\n            setSurvey({...survey, ...{activities: new Array(...new Set([...survey.activities ?? [], activity]))}});\n            \n        }else{\n            // if selected remove it from selected\n            setSurvey({...survey, ...{activities: new Array(...survey.activities ?? [] ).filter(item => item !== activity)}});\n        }\n       \n    }\n \n    const addActivityHandler = () => {\n        //show the form to add a new \n        setAddActivityVisible(true);\n    }\n\n    const saveActivityHandler = () => {\n        // add the new activity to the array of activities\n        setActivitiesList(Array(...new Set([...activitiesList, inputRef.current.textContent ]))); \n\n        // clear the input\n        setCurrentActivity(\"\");\n        inputRef.current.textContent = \"\";\n\n        // set visibility of the input to false\n        setAddActivityVisible(false);\n\n    }\n\n    const isSelectedCheck = (activity) => {\n        //let selected = new Array(...selectedActivities);\n        let selected = new Array(...survey.activities ?? []);\n        //console.log(selected);\n        return selected.includes(activity);\n    }\n\n    return (\n        <React.Fragment>\n            <Fade \n                left \n                opposite \n                collapse \n                when={visible} \n                duration={500} \n                delay={0} \n                delayOut={0}>\n                <Card className=\"SlidingCard\">\n                    <Card.Body>\n                        <Card.Text>\n                        What activities are you going to do   \n                        <br />\n                        in order to improve in {stringifyFociList()} ?        \n                            <div class=\"ActivityBadges\"> \n                               <br />\n                                {activitiesList && \n                                    activitiesList.map((item, index) => {\n                                        return(\n                                            <Badge \n                                                key={\"i_\"+index} \n                                                pill \n                                                as=\"span\"\n                                                variant={isSelectedCheck(item) ? 'primary' : 'secondary'} \n                                                cursor=\"pointer\"\n                                                style={{display: 'inline-block', cursor: 'pointer', padding: '.5em', margin: '.2em'}}\n                                                onClick={() => onActivityClickHandler(item)}  \n                                                >{item}</Badge>\n                                        );\n                                    })\n                                }\n                                <Badge\n                                    pill\n                                    variant=\"dark\">\n                                    <span\n                                    \n                                        class=\"InputSlide\"\n                                        contentEditable\n                                        onInput={(event) => { \n                                            setCurrentActivity(event.currentTarget.textContent);\n                                        }}\n                                        ref={inputRef}\n                                       \n                                        textContent={currentActivity}\n                                        style={{\n                                                borderBottom: '1px solid white', \n                                                overflow: 'hidden',\n                                                textOverflow: 'clip',\n                                                verticalAlign: 'middle',\n                                                fontSize: '1em',\n                                                width: addActivityVisible ? 'fit-content': '0px',\n                                                minWidth: addActivityVisible ? '20vw' : '0px',\n                                                display: 'inline-block',\n                                        }}\n                                        />\n                                    <AiFillCheckCircle \n                                        style={{display: addActivityVisible ? 'inline-block' : 'none'}}\n                                        onClick={saveActivityHandler}\n                                        cursor=\"pointer\" \n                                        size='1.5em' />  \n                                    <AiFillPlusCircle \n                                        style={{display: !addActivityVisible ? 'inline-block' : 'none'}}\n                                        onClick={addActivityHandler}\n                                        cursor=\"pointer\" \n                                        size='1.5em' />     \n                                </Badge>\n                                \n                            </div>\n                        </Card.Text>\n                        <Button \n                            variant=\"light\" \n                            onClick={back} >\n                            Back\n                        </Button>\n                        {' '}\n                        <Button \n                            variant=\"light\" \n                            onClick={next} >\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>                 \n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default ActivitiesCard;","import React, { useEffect, useState } from 'react';\nimport { Card, Button, Form, Row, Col, FormGroup } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { AiOutlineCheckCircle, AiOutlineMinusCircle } from 'react-icons/ai';\n\nimport visibilityState from '../atoms/visibilityState';\nimport progressState from '../atoms/progressState';\nimport surveyState from '../atoms/surveyState';\n\nconst FrequencyCard = ({next, back}) => {\n\n    const progressValue = 20;\n\n    const visible = useRecoilValue(visibilityState).frequency ? true : false;\n    const [progress, setProgress] = useRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n    const [activitiesFrequencies, setActivitiesFrequencies ] = useState({});\n    const [progressAdded, setProgressAdded] = useState(0);\n\n\n    let activities = Array.from(survey.activities ?? []);\n        \n    \n    const numberOfActivities = survey.activities?.length ?? 1;\n    const numberOfFrequencies = Object.keys(activitiesFrequencies)?.length ?? 0;\n    \n\n\n    useEffect(() => {\n\n    // ratio of activities with frequency selected to total number of activities\n    let ratio = ( numberOfFrequencies / numberOfActivities  );   \n\n    // get the amount of progress \n    // take progress value of the component multiply by ratio\n    let progressAmount = Math.floor(ratio * progressValue);\n\n\n    // add the progress to the state atom, subtract the amount previously \n    // added (tracked in local state).\n    // Fun Fact:  this has to be done in one operation of setProgress\n    setProgress(progress + progressAmount - progressAdded);\n\n    // update local state to reflect the amount of progress give\n    setProgressAdded(progressAmount);\n\n    }, [survey, progress]); //  eslint-disable-line react-hooks/exhaustive-deps\n\n\n    const selectFrequency = (event, activity) => {\n        let tempObj = {};\n        tempObj[activity] = event.target.value;\n        setActivitiesFrequencies({...activitiesFrequencies, ...tempObj});\n        setSurvey({...survey, ...{activitiesFrequencies: {...activitiesFrequencies, ...tempObj}}});\n        //console.log(activitiesFrequencies);\n        //calculateProgress();\n        \n    }\n\n    const ActivityFrequency = ({activity}) => {\n        return (\n            <React.Fragment>\n            <FormGroup as={Row} style={{ width: '80wv', marginTop: '.5em'}} >\n                <Col xs={1}>\n                    {activitiesFrequencies[activity] && activitiesFrequencies[activity] !== '-' ?\n                        <AiOutlineCheckCircle color='#0074d9' /> :\n                        <AiOutlineMinusCircle color='#aa1111' />     \n                    }\n                </Col>\n                <Col xs={5} style={{textAlign: 'left'}}>\n                    <span style={{ fontSize: '1.2rem' }}>{activity}</span>\n                </Col>                \n                <Col>\n                <Form.Control \n                    as=\"select\"\n                    onChange={(event) => {\n                                            selectFrequency(event, activity);\n                                            \n                                        }}\n                    \n                    value={activitiesFrequencies[activity] ?? \"-\"}\n                    custom                    \n                >\n                    <option>-</option>\n                    <option>Weekly</option>\n                    <option>Monthly</option>\n                    <option>Rarely</option>\n                    <option>One Time</option>\n                </Form.Control>\n                </Col>\n            </FormGroup>\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Fade \n                left \n                opposite \n                collapse \n                when={visible} \n                duration={500} \n                delay={0} \n                delayOut={0}>\n                <Card className=\"SlidingCard\">\n                    <Card.Body>\n                        <Card.Text>\n                        How often are you going to do those activities? <br />\n                        {activities &&\n                            activities.map((item, index) => <ActivityFrequency key={\"af_\"+index} activity={item} />)\n                        }\n                        </Card.Text>\n                        <Button \n                            variant=\"light\" \n                            onClick={back} >\n                            Back\n                        </Button>\n                        {' '}\n                        <Button \n                            variant=\"light\" \n                            onClick={next} >\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default FrequencyCard;","import React, { useState } from 'react';\nimport { Card, Button, Form, FormGroup, Row, Col, Badge } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { AiFillCloseCircle } from 'react-icons/ai';\nimport { GiGraduateCap, GiWhip } from 'react-icons/gi';\nimport { FaHandsHelping } from 'react-icons/fa'\n\nimport visibilityState from '../atoms/visibilityState';\nimport progressState from '../atoms/progressState';\nimport surveyState from '../atoms/surveyState';\n\nconst WhoCard = ({next, back}) => {\n\n    const progressValue = 10;\n\n    const visible = useRecoilValue(visibilityState).who ? true : false;\n    const [progress, setProgress] = useRecoilState(progressState);\n    const [survey, setSurvey] = useRecoilState(surveyState);\n    const [currentMentor, setCurrentMentor] = useState(\"\");\n    const [currentMentorType, setCurrentMentorType] = useState(\"Mentor\");\n\n\n    const addMentor = () => {\n\n        // if there is no mentors property in the survey\n        // then this is the first mentor being added and \n        // the progress bar should be updated\n        if(!survey.hasOwnProperty(\"mentors\")){\n            setProgress(progress + progressValue);\n        }\n\n        let tempMentorsObj = survey.mentors ? [...survey.mentors] : [];\n        let tempMentorObj = {\n            name: currentMentor,\n            type: currentMentorType,\n        };\n        //tempMentorsObj[currentMentor] = currentMentorType;\n        tempMentorsObj.push(tempMentorObj);\n        setSurvey({...survey, ...{mentors: tempMentorsObj}});\n    }\n\n    const Mentors = () => {\n        return (\n            <React.Fragment>\n                {survey.mentors &&\n                    survey.mentors.map((mentor, index) => {\n                      return (  \n                        <Badge \n                            pill \n                            variant=\"primary\"\n                            as=\"span\"\n                            key={\"m_\"+index}\n                            style={{padding: '.5em', margin: '.2em'}}>\n                                {mentor.type === \"Mentor\" && <FaHandsHelping />  }\n                                {mentor.type === \"Task-Master\" && <GiWhip /> }\n                                {mentor.type === \"Language Expert\" && <GiGraduateCap /> } \n                                {' '}{mentor.name}{' '}\n                                <AiFillCloseCircle cursor=\"pointer\" onClick={() => {removeMentor(mentor.name)}}  />\n                        </Badge>\n                        );\n                    })    \n                }\n            </React.Fragment>\n        );\n    }\n\n    const removeMentor = (name) => {\n        \n        let tempMentorsObj = [...survey.mentors].filter(item => item.name !== name) ?? [];\n\n        setSurvey({...survey, ...{mentors: tempMentorsObj}});\n        \n\n    }\n    \n    return (\n        <React.Fragment>\n            <Fade \n                left \n                opposite \n                collapse \n                when={visible} \n                duration={500} \n                delay={0} \n                delayOut={0}>\n                <Card className=\"SlidingCard\">\n                    <Card.Body>\n                        <Card.Text>\n                        Who can you rely on to help mentor you?  To help you stick to your goals?\n                            <br />\n                            <Mentors />\n                            <FormGroup as={Row} style={{ width: '80wv', marginTop: '.5em', marginBottom: '.5em',}} >\n                                <Col xs={12} sm={7} style={{marginTop: '.5em', paddingRight: '5px', paddingLeft:'5px'}} >\n                                    <Form.Control \n                                        type=\"text\"\n                                        placeholder=\"Who will help you?\"\n                                        value={currentMentor}\n                                        onChange={(event) => { \n                                            setCurrentMentor(event.target.value);\n                                            console.log(event.target.value);\n                                        }}\n                                    />\n                                </Col>                \n                                <Col xs={12} sm={5} style={{marginTop: '.5em', paddingRight: '5px', paddingLeft:'5px'}}>\n                                <Form.Control \n                                    as=\"select\"\n                                    onChange={(event) => setCurrentMentorType(event.target.value)}\n                                    value={currentMentorType ?? \"Mentor\"}\n                                                        \n                                >\n                                    <option>Mentor</option>\n                                    <option>Task-Master</option>\n                                    <option>Language Expert</option>\n                                </Form.Control>\n                                </Col>\n                                <Col xs={12} style={{marginTop: '.5em', paddingRight: '5px', paddingLeft:'5px'}}>\n                                    <Button\n                                        onClick={addMentor} \n                                        variant='primary' \n                                        >Add</Button>\n                                </Col>\n                            </FormGroup>             \n                        </Card.Text>\n                        <Button \n                            variant=\"light\" \n                            onClick={back} >\n                            Back\n                        </Button>\n                        {' '}\n                        <Button \n                            variant=\"light\" \n                            onClick={next} >\n                            Next\n                        </Button>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default WhoCard;","import React from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\n\nimport visibilityState from '../atoms/visibilityState';\nimport surveyState from '../atoms/surveyState';\nimport progressState from '../atoms/progressState';\n\nconst CompleteCard = ({next, back, start}) => {\n\n    const visible = useRecoilValue(visibilityState).complete ? true : false;\n\n    const setSurvey = useSetRecoilState(surveyState);\n    const setProgress = useSetRecoilState(progressState);\n\n    const startOver = () => {\n        // set the progress state to nothing\n        setSurvey({});\n\n        // set progress to zero\n        setProgress(0);\n\n        // return to the intro screen\n        start();\n    }\n\n    return (\n        <React.Fragment>\n            <Fade \n                bottom\n                cascade \n                collapse \n                when={visible} \n                duration={500} \n                delay={0} \n                delayOut={0}\n                >\n                <div style={{display: 'grid', width: '80vw', gridTemplateColumns:  'repeat(auto-fit, minmax(300px, 1fr))'}}>\n                    <Card className=\"SmallCard\">\n                    <Card.Body>\n                        Start over\n                        <br />\n                            <Button\n                                style={{marginTop: '1rem'}}\n                                variant=\"primary\"\n                                onClick={startOver}\n                            >Start Over</Button>\n                        </Card.Body>\n                    </Card>\n                    <Card className=\"SmallCard\">\n                        <Card.Body>\n                        Go back, maybe change some answers\n                        <br />\n                            <Button\n                                style={{marginTop: '1rem'}}\n                                variant=\"primary\"\n                                onClick={back}\n                            >Back</Button>\n                        </Card.Body>\n                    </Card>\n                    <Card className=\"SmallCard\">\n                        <Card.Body>\n                            Get learning plan based on your answers\n                            <br />\n                            <Button\n                                style={{marginTop: '1rem'}}\n                                variant=\"primary\"\n                                onClick={next}\n                            >Get ILTP</Button>\n                        </Card.Body>\n                    </Card>\n\n                </div>\n\n\n                  \n            </Fade>\n        </React.Fragment>\n    );\n\n}\n\nexport default CompleteCard;","\n/* \n* Helper function(s) which parse through a survey object and\n* returns a string -- the formatted ILTP\n*/\n\n\nconst getILTP = (survey = {}) => {\n\n    const language = (language = \"Not Specified\") => {\n\n        return (\n`TARGET LANGUAGE: ${language}\n`\n        );\n    };\n\n    const scores = ({listening = \"N/A\", reading = \"N/A\"}) => {\n        \n\n        return (\n`READING: ${reading} \nLISTENING: ${listening} \n`\n        );\n\n    };\n\n    const goal = (goal) => {\n\n        return (\n`YOUR GOAL: ${goal}\n`\n        );\n\n    };\n\n    const why = (why) => {\n        if(why){\n        return(\n`WHY THIS GOAL IS IMPORTANT: ${why}\n`\n        );\n        }else{\n            return \"\";\n        }\n            \n    };\n    const foci = (foci) => {\n        let retString = \"\";\n\n        if(foci && foci.length){\n\n            retString = \"LANGUAGE AREA(S) OF FOCUS:\";\n            foci.map((item) => { \n                retString = retString + '\\n\\t' + item;\n                return true;\n            });\n\n        }\n        return retString;\n    };\n\n    const activities = (activities) => {\n\n        let retString = \"\"; \n\n        if(activities && Object.keys(activities).length){\n                       \n            retString = \"LANGUAGE ACTIVITIES AND FREQUENCY:\"\n                Object.entries(activities).map((item) => {\n                    retString = `${retString} ${'\\n\\t'} ${item[0]} (${item[1]})`;\n                    return true;\n                });\n\n              \n        }\n\n        return retString;\n    };\n\n    const mentors = (mentors) => {\n        \n        let retString = \"\";\n\n        if(mentors && mentors.length){\n            retString = \"MENTOR(S):\";\n            mentors.map((item) => { \n                retString = `${retString} \\n\\t ${item.name} (${item.type})`;\n                return true;\n            })\n        }\n\n        return retString;\n    };\n\n\n    const ILTPText = \n`${language(survey.targetLanguage)}\n${scores({reading: survey.readingScore, listening: survey.listeningScore})}\n${goal(survey.goal)}\n${why(survey.why)}\n${foci(survey.foci)}\n\n${activities(survey.activitiesFrequencies)}\n\n${mentors(survey.mentors)}\n`;\n\n    return ILTPText;\n\n}\n\nexport default getILTP;","import React, { useRef, useState } from 'react';\nimport { Card, Button, Form, Row, Col, Badge, Toast } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\nimport { useRecoilValue } from 'recoil';\nimport { AiOutlineFilePdf } from 'react-icons/ai';\n\n\nimport visibilityState from '../atoms/visibilityState';\nimport surveyState from '../atoms/surveyState';\n\n\nimport getILTP from '../ILTP';\n\n\n\nfunction ILTPCard({back, next}) {\n\n   \n\n    const ILTPElement = useRef(null);\n    const survey = useRecoilValue(surveyState);\n    const [showCopiedSuccess, setShowCopiedSuccess] = useState(false);\n    \n\n\n    const copyToClipboard = () => {\n\n        //ILTPText.current.select();\n        console.log(ILTPElement.current.innerHTML);\n        // document.execCommand('copy');\n\n        //navigator.clipboard.writeText(\"Something\");\n\n        navigator.clipboard.writeText(ILTPElement.current.innerHTML).then(function() {\n            /* clipboard successfully set */\n            console.log(\"great success\");\n            setShowCopiedSuccess(true);\n          }, function() {\n              \n            /* clipboard write failed */\n            console.log(\"oh noes\");\n          });\n    };\n\n    const visible = useRecoilValue(visibilityState).ILTP? true : false;\n\n    return (\n        <React.Fragment>\n            <Fade\n                top\n                opposite\n                collapse\n                when={visible}\n                duration={500}\n                delay={0}\n            >\n                <Card className=\"SlidingCard\">\n                    <Card.Body>\n                        <Card.Title>Individualized Training Plan</Card.Title>\n                        <Row noGutters>\n                            <Col sm={10}>\n                                <Form.Control \n                                as=\"textarea\"\n                                value={getILTP(survey)}\n                                ref={ILTPElement}\n                                rows={10}\n                                sty                            \n                              />\n                            </Col>\n                            <Col style={{fontSize: '.7em'}}>\n                                <a href=\"af623a_clean.pdf\" target=\"_blank\">\n                                <AiOutlineFilePdf cursor=\"pointer\" size='2em'  /><br />\n                                <Badge variant=\"primary\" >623A</Badge>\n                                </a>\n                            </Col>\n                        </Row>\n\n\n                         \n                        <Button\n                            variant=\"light\"\n                            onClick={back}>\n                            Back\n                        </Button>\n                        {' '}\n                        <Button\n                            variant=\"light\"\n                            onClick={copyToClipboard}>\n                            Copy to Clipboard\n                        </Button>\n                        <Toast \n                            onClose={() => setShowCopiedSuccess(false)}\n                            show={showCopiedSuccess}\n                            delay={1000}\n                            autohide\n                            style={{\n                                position: 'absolute',\n                                top: '50%',\n                                right: '50%',\n                              }}>\n                            <Toast.Body>Copied!</Toast.Body>\n                        </Toast>\n                    </Card.Body>\n                </Card>\n            </Fade>\n        </React.Fragment>\n    );\n\n\n}\n\nexport default ILTPCard;","import './App.css';\nimport React from 'react';\nimport { Card, Button, ProgressBar } from 'react-bootstrap';\nimport { Fade } from 'react-reveal';\n\nimport { AiOutlineFileText, AiFillCloseCircle } from 'react-icons/ai';\n\nimport { useRecoilState, useRecoilValue } from 'recoil';\n\nimport ChooseLanguageCard from './cards/ChooseLanguageCard';\nimport PreviousScoresCard from './cards/PreviousScoresCard';\nimport GoalCard from './cards/GoalCard';\nimport WhyCard from './cards/WhyCard';\nimport FocusCard from './cards/FocusCard';\nimport ActivitiesCard from './cards/ActivitiesCard';\nimport FrequencyCard from './cards/FrequencyCard';\nimport WhoCard from './cards/WhoCard';\n\n\n\nimport visibilityState from './atoms/visibilityState';\nimport progressState from './atoms/progressState';\nimport surveyState from './atoms/surveyState';\nimport CompleteCard from './cards/CompleteCard';\nimport ILTPCard from './cards/ILTPCard';\n\nfunction App() {\n\n    const [isVisible, setVisibilityState] = useRecoilState(visibilityState);\n    const progress = useRecoilValue(progressState);\n    const survey = useRecoilValue(surveyState);\n\n    let vis = { ...isVisible };\n\n    const hideCard = (name = \"\") => {\n        console.log(\"hiding...\" + name);\n        vis[name] = false;\n        setVisibilityState(vis);\n        return Promise.resolve();\n    };\n\n    const showCard = async (name = \"\") => {\n        console.log(\"showing... \" + name);\n        let visible = { ...vis };\n        visible[name] = true;\n        setVisibilityState(visible);\n        return Promise.resolve(visible);\n    };\n\n    const hideThenShow = (hide, show) => {\n\n        console.log(\"show hide called\");\n\n        console.log(isVisible);\n        hideCard(hide).then(\n            setTimeout(() => { showCard(show).then(console.log(isVisible)); }, 1000)\n        );\n    }\n\n    return (\n        <div class=\"App\" style={{ overflow: 'hidden', \n                                  backgroundImage: \"url(/monterey_trail.jpeg)\",\n                                  backgroundPosition: \"center\",\n                                  backgroundSize: \"cover\",  }}>\n            <div className=\"Header\">\n                <p>ILTP-Helper</p>\n                <ProgressBar now={progress} label={`${progress}%`} />\n            </div>\n            <div className=\"Content\">\n                <div className=\"Cards\">\n                    <Fade left collapse opposite when={isVisible.intro} duration={500} delay={200} >\n                        <Card className=\"SlidingCard\">\n                            <Card.Body>\n                                <Card.Title>Welcome!</Card.Title>\n                                <Card.Text>\n                                    This app is designed to make it easier for linguists to develop an\n                                    Individualized Language Training Plan.  This program will ask you a series of\n                                    questions which will help you focus on achieving your Language learning goals.\n                             </Card.Text>\n                                <Button\n                                    variant=\"light\"\n                                    onClick={() => {\n\n                                        hideThenShow(\"intro\", \"chooseLanguage\");\n                                    }}>\n                                    Get Started\n                                </Button>\n                            </Card.Body>\n                        </Card>\n                    </Fade>\n                    <ChooseLanguageCard\n                        back={() => { hideThenShow(\"chooseLanguage\", \"intro\"); }}\n                        next={() => { hideThenShow(\"chooseLanguage\", \"previousScores\"); }}\n                    />\n                    <PreviousScoresCard\n                        back={() => { hideThenShow(\"previousScores\", \"chooseLanguage\"); }}\n                        next={() => { hideThenShow(\"previousScores\", \"goals\"); }}\n                    />\n                    <GoalCard\n                        back={() => { hideThenShow(\"goals\", \"previousScores\"); }}\n                        next={() => { hideThenShow(\"goals\", \"why\"); }}\n                    />\n                    <WhyCard\n                        back={() => { hideThenShow(\"why\", \"goals\"); }}\n                        next={() => { hideThenShow(\"why\", \"focus\"); }}\n                    />\n                    <FocusCard\n                        back={() => { hideThenShow(\"focus\", \"why\"); }}\n                        next={() => { hideThenShow(\"focus\", \"activities\"); }}\n                    />\n                    <ActivitiesCard\n                        back={() => { hideThenShow(\"activities\", \"focus\"); }}\n                        next={() => { hideThenShow(\"activities\", \"frequency\"); }}\n                    />\n                    <FrequencyCard\n                        back={() => { hideThenShow(\"frequency\", \"activities\"); }}\n                        next={() => { hideThenShow(\"frequency\", \"who\"); }}\n                    />\n                    <WhoCard\n                        back={() => { hideThenShow(\"who\", \"frequency\"); }}\n                        next={() => { hideThenShow(\"who\", \"complete\"); }}\n                    />\n                    <CompleteCard\n                        back={() => { hideThenShow(\"complete\", \"who\"); }}\n                        next={() => { hideThenShow(\"complete\", \"ILTP\"); }}\n                        start={() => {hideThenShow(\"complete\", \"intro\")}}\n                    />\n                    <ILTPCard\n                        back={() => { hideThenShow(\"ILTP\", \"complete\"); }}\n                        next={() => { hideThenShow(\"ILTP\", \"intro\")}}\n                    />\n                </div>\n            </div>\n            <div class=\"Footer\">\n                <p>ILTP-Helper Copyright 2020</p>\n            </div>\n            <div class=\"BottomRightMenu\">\n                <AiOutlineFileText cursor=\"pointer\" size='2em' onClick={() => showCard(\"menuOverlay\")} />\n            </div>\n            {/* <div className={isVisible.menuOverlay ? 'visible sideMenu' : 'sideMenu'}> */}\n            <div className={isVisible.menuOverlay ? 'sideMenuVisible sideMenu' : 'sideMenu'} onClick={() => hideCard(\"menuOverlay\")} />\n            <div className={isVisible.menuOverlay ? 'glassOverlayVisible GlassOverlay' : 'GlassOverlay'} >\n                <div className=\"GlassOverlayBottom\" >\n                    <AiFillCloseCircle cursor=\"pointer\" size='1.5em' onClick={() => hideCard(\"menuOverlay\")} />\n                </div>\n\n                <div class=\"OverlayContent\">Learner Survey <div style={{ textAlign: \"left\", padding: '2em' }}>\n                    <pre style={{ fontSize: '.5em', color: 'white' }}>{JSON.stringify(survey, null, 3)}</pre>\n                </div>\n\n            </div>\n            \n\n\n        </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  RecoilRoot,\n} from 'recoil';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <RecoilRoot>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </RecoilRoot>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}